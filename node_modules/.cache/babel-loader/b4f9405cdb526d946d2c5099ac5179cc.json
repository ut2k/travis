{"ast":null,"code":"import _slicedToArray from \"/Users/utkarshmishra/TeamOrange/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/utkarshmishra/TeamOrange/src/Components/WorkoutList.js\";\nimport React, { useContext, useState } from 'react';\nimport { Card } from 'semantic-ui-react';\nimport Workout from './Workout';\nimport { WorkoutContext } from '../context';\n\nconst WorkoutList = ({\n  user\n}) => {\n  const workoutContext = useContext(WorkoutContext);\n  const workouts = workoutContext.workouts,\n        setCountdown = workoutContext.setCountdown,\n        toggleFavs = workoutContext.toggleFavs,\n        favworkouts = workoutContext.favworkouts,\n        replaceWorkout = workoutContext.replaceWorkout;\n\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        refresh = _useState2[0],\n        setRefresh = _useState2[1];\n\n  const workoutList = workouts;\n  return React.createElement(Card.Group, {\n    style: {\n      textAlign: \"left\",\n      width: \"80%\",\n      marginTop: \"10px\"\n    },\n    itemsPerRow: 1,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    },\n    __self: this\n  }, workoutList.map(exercise => {\n    return React.createElement(Workout, {\n      user: user,\n      exercise: exercise,\n      key: exercise.Title,\n      replaceWorkout: replaceWorkout,\n      refresh: () => setRefresh(!refresh),\n      setCountdown: () => setCountdown(parseInt(exercise.Duration) * 1000),\n      toggleFavs: toggleFavs,\n      favworkouts: favworkouts,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17\n      },\n      __self: this\n    });\n  }));\n};\n\nexport default WorkoutList;","map":{"version":3,"sources":["/Users/utkarshmishra/TeamOrange/src/Components/WorkoutList.js"],"names":["React","useContext","useState","Card","Workout","WorkoutContext","WorkoutList","user","workoutContext","workouts","setCountdown","toggleFavs","favworkouts","replaceWorkout","refresh","setRefresh","workoutList","textAlign","width","marginTop","map","exercise","Title","parseInt","Duration"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,QAA5B,QAA4C,OAA5C;AACA,SAASC,IAAT,QAAqB,mBAArB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,SAASC,cAAT,QAA+B,YAA/B;;AAGA,MAAMC,WAAW,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAc;AAChC,QAAMC,cAAc,GAAGP,UAAU,CAACI,cAAD,CAAjC;AADgC,QAExBI,QAFwB,GAE4CD,cAF5C,CAExBC,QAFwB;AAAA,QAEdC,YAFc,GAE4CF,cAF5C,CAEdE,YAFc;AAAA,QAEAC,UAFA,GAE4CH,cAF5C,CAEAG,UAFA;AAAA,QAEYC,WAFZ,GAE4CJ,cAF5C,CAEYI,WAFZ;AAAA,QAEyBC,cAFzB,GAE4CL,cAF5C,CAEyBK,cAFzB;;AAAA,oBAGFX,QAAQ,CAAC,KAAD,CAHN;AAAA;AAAA,QAGzBY,OAHyB;AAAA,QAGhBC,UAHgB;;AAIhC,QAAMC,WAAW,GAAGP,QAApB;AAEA,SACE,oBAAC,IAAD,CAAM,KAAN;AAAY,IAAA,KAAK,EAAE;AAAEQ,MAAAA,SAAS,EAAE,MAAb;AAAqBC,MAAAA,KAAK,EAAE,KAA5B;AAAmCC,MAAAA,SAAS,EAAE;AAA9C,KAAnB;AAA0E,IAAA,WAAW,EAAE,CAAvF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGH,WAAW,CAACI,GAAZ,CAAgBC,QAAQ,IAAI;AAC3B,WACE,oBAAC,OAAD;AACE,MAAA,IAAI,EAAEd,IADR;AAEE,MAAA,QAAQ,EAAEc,QAFZ;AAGE,MAAA,GAAG,EAAEA,QAAQ,CAACC,KAHhB;AAIE,MAAA,cAAc,EAAET,cAJlB;AAKE,MAAA,OAAO,EAAE,MAAME,UAAU,CAAC,CAACD,OAAF,CAL3B;AAME,MAAA,YAAY,EAAE,MAAMJ,YAAY,CAACa,QAAQ,CAACF,QAAQ,CAACG,QAAV,CAAR,GAA8B,IAA/B,CANlC;AAOE,MAAA,UAAU,EAAEb,UAPd;AAQE,MAAA,WAAW,EAAEC,WARf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAWE,GAZH,CADH,CADF;AAkBD,CAxBD;;AA0BA,eAAeN,WAAf","sourcesContent":["import React, { useContext, useState } from 'react';\nimport { Card } from 'semantic-ui-react';\nimport Workout from './Workout';\nimport { WorkoutContext } from '../context';\n\n\nconst WorkoutList = ({ user }) => {\n  const workoutContext = useContext(WorkoutContext)\n  const { workouts, setCountdown, toggleFavs, favworkouts, replaceWorkout } = workoutContext;\n  const [refresh, setRefresh] = useState(false)\n  const workoutList = workouts\n\n  return (\n    <Card.Group style={{ textAlign: \"left\", width: \"80%\", marginTop: \"10px\"}} itemsPerRow={1}> \n      {workoutList.map(exercise => {\n        return (\n          <Workout \n            user={user}\n            exercise={exercise} \n            key={exercise.Title}\n            replaceWorkout={replaceWorkout}\n            refresh={() => setRefresh(!refresh)}\n            setCountdown={() => setCountdown(parseInt(exercise.Duration) * 1000)}\n            toggleFavs={toggleFavs}\n            favworkouts={favworkouts}\n          />\n        )}\n      )}\n    </Card.Group>\n  )\n};\n\nexport default WorkoutList"]},"metadata":{},"sourceType":"module"}